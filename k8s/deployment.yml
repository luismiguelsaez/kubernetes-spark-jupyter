
---

apiVersion: v1
kind: Secret
metadata:
  namespace: jupyter
  name: jupyter-access
data:
  JUPYTER_TOKEN: OWY4NmQwODE4ODRjN2Q2NTlhMmZlYWEwYzU1YWQwMTVhM2JmNGYxYjJiMGI4MjJjZDE1ZDZjMTViMGYwMGEwOA==
  JUPYTER_GATEWAY_HTTP_USER: anVweXRlcg==
  JUPYTER_GATEWAY_HTTP_PWD: anVweXRlcnB3ZA==
  JUPYTER_LOGIN_PASS: dGVzdGluZw==

---

apiVersion: v1
kind: ConfigMap
metadata:
  namespace: jupyter
  name: jupyter-notebook-config
data:
  jupyter_notebook_config.py: |-
    from jupyter_core.paths import jupyter_data_dir
    import subprocess
    import os
    import errno
    import stat
    from notebook.auth import passwd

    c = get_config()  # noqa: F821
    c.NotebookApp.ip = '0.0.0.0'
    c.NotebookApp.port = 8888
    c.NotebookApp.open_browser = False

    if 'JUPYTER_LOGIN_PASS' in os.environ:
      gen_pass = passwd(os.environ['JUPYTER_LOGIN_PASS'])
      c.NotebookApp.password = gen_pass

    # https://github.com/jupyter/notebook/issues/3130
    c.FileContentsManager.delete_to_trash = False

    # Generate a self-signed certificate
    if 'GEN_CERT' in os.environ:
        dir_name = jupyter_data_dir()
        pem_file = os.path.join(dir_name, 'notebook.pem')
        try:
            os.makedirs(dir_name)
        except OSError as exc:  # Python >2.5
            if exc.errno == errno.EEXIST and os.path.isdir(dir_name):
                pass
            else:
                raise

        # Generate an openssl.cnf file to set the distinguished name
        cnf_file = os.path.join(os.getenv('CONDA_DIR', '/usr/lib'), 'ssl', 'openssl.cnf')
        if not os.path.isfile(cnf_file):
            with open(cnf_file, 'w') as fh:
                fh.write('''\
    [req]
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    ''')

        # Generate a certificate if one doesn't exist on disk
        subprocess.check_call(['openssl', 'req', '-new',
                              '-newkey', 'rsa:2048',
                              '-days', '365',
                              '-nodes', '-x509',
                              '-subj', '/C=XX/ST=XX/L=XX/O=generated/CN=generated',
                              '-keyout', pem_file,
                              '-out', pem_file])
        # Restrict access to the file
        os.chmod(pem_file, stat.S_IRUSR | stat.S_IWUSR)
        c.NotebookApp.certfile = pem_file

    # Change default umask for all subprocesses of the notebook server if set in
    # the environment
    if 'NB_UMASK' in os.environ:
        os.umask(int(os.environ['NB_UMASK'], 8))

---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: jupyter
  name: jupyter-all-spark-notebook
  labels:
    app: jupyter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jupyter
  template:
    metadata:
      labels:
        app: jupyter
    spec:
      serviceAccountName: jupyter
      containers:
        - name: jupyter
          image: jupyter/all-spark-notebook:latest
          resources:
            requests:
              cpu: 125m
              memory: 128M
            limits:
              cpu: 500m
              memory: 512M
          ports:
            - containerPort: 8888
          envFrom:
            - secretRef:
                name: jupyter-access
          volumeMounts:
            - name: config
              mountPath: /etc/jupyter/
            - mountPath: /data
              name: data
      volumes:
        - name: config
          configMap:
            name: jupyter-notebook-config
        - name: data
          emptyDir: {}
---

apiVersion: v1
kind: Service
metadata:
  namespace: jupyter
  name: jupyter-all-spark-driver
spec:
  selector:
    app: jupyter
  ports:
    - protocol: TCP
      port: 29413
      targetPort: 8888
  clusterIP: None

---


---

apiVersion: v1
kind: Service
metadata:
  namespace: jupyter
  name: jupyter-all-spark
spec:
  selector:
    app: jupyter
  ports:
    - protocol: TCP
      port: 8888
      targetPort: 8888

---

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  namespace: jupyter
  name: jupyter-all-spark
spec:
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: jupyter-all-spark
          servicePort: 8888
